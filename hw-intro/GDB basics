1.Run GDB on the map executable.
gdb map

2.Set a breakpoint at the beginning of the program’s execution.
b main

3.Run the program until the breakpoint.
r

4.What memory address does argv store?
print argv
$2 = (char **) 0x7fffffffdf08

5.Describe what’s located at that memory address. (What does argv point to?)
print *argv
$1 = 0x7fffffffe1f7 "/home/vagrant/code/personal/hw-intro/map"

6.Step until you reach the first call to recur.

7.What is the memory address of the recur function?
print recur 
$5 = {int (int)} 0x5555555546cd <recur>

8.Step into the first call to recur.

9.Step until you reach the if statement.

10.Switch into assembly view.
layout asm

11.Step over instructions until you reach the callq instruction (or the call instruction if you are using QEMU).

12.What values are in all the registers?
info r
rax            0x2      2
rbx            0x0      0
rcx            0x0      0
rdx            0x0      0
rsi            0x555555756340   93824994337600
rdi            0x2      2
rbp            0x7fffffffdde0   0x7fffffffdde0
rsp            0x7fffffffddc0   0x7fffffffddc0
r8             0x0      0
r9             0x0      0
r10            0x555555756010   93824994336784
r11            0x246    582
r12            0x555555554580   93824992232832
r13            0x7fffffffdf00   140737488346880
r14            0x0      0
r15            0x0      0
rip            0x555555554702   0x555555554702 <recur+53>
eflags         0x202    [ IF ]
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0
13.Step into the callq instruction.

14.Switch back to C code mode.

15.Now print out the current call stack. Hint: what does the backtrace command do?
#0  recur (i=21845) at recurse.c:3
#1  0x0000555555554707 in recur (i=3) at recurse.c:9
#2  0x00005555555546c6 in main (argc=1, argv=0x7fffffffdf08) at map.c:23
16.Now set a breakpoint on the recur function which is only triggered when the argument is 0.
b recur if i == 0
17.Continue until the breakpoint is hit.

18.Print the call stack now.
#0  recur (i=0) at recurse.c:5
#1  0x0000555555554707 in recur (i=1) at recurse.c:9
#2  0x0000555555554707 in recur (i=2) at recurse.c:9
#3  0x0000555555554707 in recur (i=3) at recurse.c:9
#4  0x00005555555546c6 in main (argc=1, argv=0x7fffffffdf08) at map.c:23
19.Now go up the call stack until you reach main. What was argc?
up
print argc
$4 = 1
20.Now step until the return statement in recur.

21.Switch back into the assembly view.

22.Which instructions correspond to the return 0 in C?
 >│0x555555554709 <recur+60>               mov    $0x0,%eax                        │
   │0x55555555470e <recur+65>               leaveq                                  │
   │0x55555555470f <recur+66>               retq 
23.Now switch back to the source layout.

24.Finish the remaining 3 function calls.

25.Run the program to completion.

26.Quit GDB.